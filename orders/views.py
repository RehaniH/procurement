"""The class for logging to server"""
import logging

from django.shortcuts import render #, redirect
from django.utils.datastructures import MultiValueDictKeyError
from django.contrib.auth import authenticate, login, logout
from django.views import generic
from django.contrib.auth.models import Permission, User
from django.contrib.contenttypes.models import ContentType
from django.shortcuts import get_object_or_404
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from .models import Employee, RequestOrders, Item, ItemPrices, Supplier


logger = logging.getLogger(__name__)

def  index(request):
    """Index page of the application."""
    return render(request, 'orders/login.html')

#sample
#use this to check if logged else redirect to login url
@login_required 
def check_web(request):
    try:
        emp = request.user
        employee = Employee.objects.get(user=emp)
        if employee is not None:
             print(employee.employee_type)
        else:
            print('redirect')    
        data = {'Employee': 'success'}
        return JsonResponse(data)  

    except Exception as e:
        print(e) 
        data = {'Employee': 'error'}
        print('User not found')
        
        return JsonResponse(data)    

#login - authentication
def login_web(request):
    """Authenticating a login request."""
    username = request.POST.get('username')
    password = request.POST.get('password')
    user = authenticate(request, username=username, password=password)
    if user is not None:
        login(request, user)
        user_group = user.groups.all()[:1].get().name 
        #user.groups.all()[:1].get().name #can use this get the group of user

        if(user_group == "Manager" or user_group == "Supervisor" ):
            return render(request, 'orders/register.html') #replace this with your dashboard
        elif(user_group == "Accounting Staff"):
            return render(request, 'accounting/dashboard.html')
        else:
            return render(request, 'orders/login.html')
        
    else:
        logger.error("User is not found: "  + username + "  = " + password)
        data = {'Employee': 'error'}
        return JsonResponse(data)

#logging out a logged in user
def logout_view(request):
    """Logging out a logged in user."""
    logout(request)   
    return render(request, 'orders/login.html')   


class ViewRequests(generic.ListView):
    """"View a list of order requests generated by the site manager."""
    model = RequestOrders
    template_name = 'accounting/requests.html'      


class ViewItems(generic.ListView):
    """View a list of saved catalog items."""
    model = Item
    template_name = 'accounting/items-catalog.html'     

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)    
        context['itemprices_list'] = ItemPrices.objects.all()
       # context['academic_ll'] = AcademicYearSemester.objects.all()
        return context 


def add_items(request):
    """Items are added to database"""
    try:
        name = request.POST['item_name']
        description = request.POST['item_description']

        item_obj = Item.objects.create(
            name=name,
            description=description
        )  

        data = {
            'success_stat': 1,
            'id': item_obj.id,
            'name': item_obj.name,
            'description': item_obj.description
        }    
        return JsonResponse(data)
    except Exception as e:
        logger.exception(e)
        data = {
            'success_stat': 0,
            'error_message': 'Unable to process request',
        }    
        return JsonResponse(data)

def add_prices(request, pk):
    """Items are added to database"""
    try:
        #item_id = request.POST['item_id']
        price = request.POST['price']
        supplier_id = request.POST['supplier']

        item_object = Item.objects.get(pk=pk)
        supplier_object = Supplier.objects.get(pk=supplier_id)

        item_price = ItemPrices.objects.create(
            supplier=supplier_object,
            item=item_object,
            price=price
        )

        data = {
            'success_stat': 1,
            'id': item_price.id,
            'price': item_price.price,
            'supplier_id': item_price.supplier.id
        }    
        return JsonResponse(data)
    except MultiValueDictKeyError as mk:
        logger.exception(mk)
        data = {
            'success_stat': 0,
            'error_message': 'Unable to process request',
        }    
        return JsonResponse(data)  

class CreateItemPrices(generic.DetailView):

    model = Item
    template_name = 'accounting/item-prices.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)    
        context['supplier_list'] = Supplier.objects.all()
        return context