"""The class for logging to server"""
import logging

from django.shortcuts import render  # , redirect
from django.utils.datastructures import MultiValueDictKeyError
from django.views.generic import ListView
from django.views.generic import View
from django.http import JsonResponse
from django.http import HttpResponseRedirect

from django.shortcuts import render
# andrew
from django.http.response import JsonResponse
from rest_framework.parsers import JSONParser
from rest_framework import status
from orders.models import DeliveryLog, Item, OrderStatus, RequestOrders, Site, Stock, Orders
from orders.serializers import DeliveryLogSerializer, StockSerializer, requestOrdersSerializer
from rest_framework.decorators import api_view

from django.contrib.auth import authenticate, login, logout
from django.views import generic
from django.contrib.auth.models import Permission, User
from django.contrib.contenttypes.models import ContentType
from django.shortcuts import get_object_or_404
from orders.models import Employee
from rest_framework import generics
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from orders.models import Employee, RequestOrders, Item, ItemPrices, Supplier, Orders, OrderStatus, Site
from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist
from django.db.utils import IntegrityError
from orders.models import Employee, Rule1, Rule2, Rule3, Pending_orders, Item

logger = logging.getLogger(__name__)



class ViewRequests(generic.ListView):
    """"View a list of order requests generated by the site manager."""
    model = RequestOrders
    template_name = 'accounting/requests.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['sites_list'] = Site.objects.all()
        return context


class ViewItems(generic.ListView):
    """View a list of saved catalog items."""
    model = Item
    template_name = 'accounting/items-catalog.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['itemprices_list'] = ItemPrices.objects.all()
       # context['academic_ll'] = AcademicYearSemester.objects.all()
        return context


def add_items(request):
    """Items are added to database"""
    try:
        name = request.POST['item_name']
        description = request.POST['item_description']

        item_obj = Item.objects.create(
            name=name,
            description=description
        )

        data = {
            'success_stat': 1,
            'id': item_obj.id,
            'name': item_obj.name,
            'description': item_obj.description
        }
        return JsonResponse(data)
    except Exception as e:
        logger.exception(e)
        data = {
            'success_stat': 0,
            'error_message': 'Unable to process request',
        }
        return JsonResponse(data)


def add_prices(request, pk):
    """Item prices are added to database"""
    try:
        price = request.POST['price']
        supplier_id = request.POST['supplier']

        item_object = Item.objects.get(pk=pk)
        supplier_object = Supplier.objects.get(pk=supplier_id)

        item_price = ItemPrices.objects.create(
            supplier=supplier_object,
            item=item_object,
            price=price
        )

        data = {
            'success_stat': 1,
            'id': item_price.id,
            'price': item_price.price,
            'supplier_id': item_price.supplier.id
        }
        return JsonResponse(data)
    except MultiValueDictKeyError as mk:
        logger.exception(mk)
        data = {
            'success_stat': 0,
            'error_message': 'Unable to process request',
        }
        return JsonResponse(data)


class CreateItemPrices(generic.DetailView):
    """View item prices page"""
    model = Item
    template_name = 'accounting/item-prices.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['supplier_list'] = Supplier.objects.all()
        return context


class ViewPurchaseOrders(generic.ListView):
    """"View a list of purchase orders created by account staff"""
    model = Orders
    template_name = 'accounting/purchase-orders.html'


def view_order_request(request, pk):
    requestorders = RequestOrders.objects.get(pk=pk)
    price_list = ItemPrices.objects.filter(item=requestorders.item)
    print(price_list)
    context = {
        'price_list': price_list,
        'requestorders': requestorders
    }
    return render(request, 'accounting/purchase-order-create.html', context)


